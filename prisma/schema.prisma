// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// ORM/SDK: make it easy manage the db. basically makes every row an object, so it takes an OOP approach
// migration: "teach the db" what the data looks like. 

// MAKE SURE: npm i @prisma/client --save
// this is the sdk used in the code to interact with db
// have added DATABASE_URL to .env

// migrate with a name so that migrations can be identified/pushed to git/reused
// npx prisma migrate dev --name <init>

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  username  String    @unique
  password  String
  products  Product[]
}

model Product {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  name      String   @db.VarChar(255) // limit the length

  // product that belongs to a user (one user to many products)
  // belongsTo has a type User. the relation: the field in Product references the field in User
  belongsToId String
  belongsTo   User     @relation(fields: [belongsToId], references: [id])
  updates     Update[]
}

enum UPDATE_STATUS {
  IN_PROGRESS
  SHIPPED
  DEPRECATED
  LIVE
}

model Update {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime

  title   String
  body    String
  status  UPDATE_STATUS @default(IN_PROGRESS)
  version String?
  asset   String?

  productId    String
  product      Product       @relation(fields: [productId], references: [id])
  updatePoints UpdatePoint[]
}

model UpdatePoint {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime

  name        String @db.VarChar(255)
  description String

  updateId String
  update   Update @relation(fields: [updateId], references: [id])
}
